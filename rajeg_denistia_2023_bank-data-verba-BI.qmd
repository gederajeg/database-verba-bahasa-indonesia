---
title: "*VerbInd*: Pangkalan data verba bahasa Indonesia berbasis korpus"
author:
  - name:
      given: Gede Primahadi Wijaya
      family: Rajeg
    url: https://www.ling-phil.ox.ac.uk/people/gede-rajeg
    orcid: 0000-0002-2047-8621
    attributes:
      - corresponding: true 
    affiliations:
      - University of Oxford
      - Universitas Udayana
  - name:
      given: Karlina
      family: Denistia
    url: https://www.researchgate.net/profile/Karlina-Denistia
    orcid: 0000-0002-1060-3548
    attributes:
      - corresponding: false 
    affiliations:
      - Universitas Sebelas Maret
format: 
  html:
    page-layout: full
editor: visual
bibliography: "https://api.citedrive.com/bib/d552fe3b-4481-4b90-85a9-a5568cdc0670/references.bib?x=eyJpZCI6ICJkNTUyZmUzYi00NDgxLTRiOTAtODVhOS1hNTU2OGNkYzA2NzAiLCAidXNlciI6ICIzODg0IiwgInNpZ25hdHVyZSI6ICI4YzNhNjU2ZGVkMjAyYTQ0NzgzODE1N2IxNzhiYTZjZDkxNDM5MmE4ZTE4ZmJmYjY0M2M0ODk0ZjQzZGY4NTVhIn0=/bibliography.bib"
csl: "https://raw.githubusercontent.com/citation-style-language/styles/master/unified-style-sheet-for-linguistics.csl"
---

# Pengantar

<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="Creative Commons License" style="border-width:0"/></a> <br />*VerbInd* berlisensi <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.

-----------------

Berikut adalah cara mengutip *VerbInd* ketika dirujuk dalam penelitian dan/atau pengajaran bahasa Indonesia:

> Rajeg, G. P. W., & Denistia, K. (2023). *VerbInd*: Pangkalan data verba bahasa Indonesia berbasis korpus (Version 0.0.1) \[Dataset\]. https://gederajeg.github.io/database-verba-bahasa-indonesia/

*VerbInd* dibangun dari pangkalan data leksikal verba bahasa Indonesia berbasis korpus [@Rajeg2023]. Pangkalan data tersebut melandasi bab buku berjudul [*Afiksasi Verba dalam Bahasa Indonesia*](https://doi.org/10.6084/m9.figshare.22336729) [@Rajeg2023a], yang akan terbit dalam bunga rampai sebagai bagian dari proyek penulisan buku Tatabahasa Bahasa Indonesia Kontemporer berbasis korpus ([flyer seminar hasil](https://www.facebook.com/photo?fbid=581508360693816&set=a.227078366136819) dan [rekaman seminar hasil](https://www.youtube.com/live/fD70Nhs6vug?feature=share)).

# Tabel data

```{r setup, message = FALSE, echo = FALSE}
library(tidyverse)
library(reactable)
library(htmltools)
verba <- read_tsv("https://raw.githubusercontent.com/gederajeg/afiksasi-verba-bahasa-indonesia/main/verbs_main.txt") %>% 
  select(year, 
         form = word_form, 
         freq = n, 
         genres, 
         morph = morphind, 
         pref = pref_morphind, 
         root = root_morphind, 
         root_POS = root_pos_morphind, 
         suff = suff_morphind #, 
         # affix = affix_morphind, 
         # affix_wclass = affix_morphind_wclass
         ) %>% 
  mutate(across(c(pref, root_POS, suff, genres), as.factor))

# Select input filter with an "All" default option
selectFilter <- function(tableId, style = "width: 100%; height: 100%;") {
  function(values, name) {
    tags$select(
      # Set to undefined to clear the filter
      onchange = sprintf("
        const value = event.target.value
        Reactable.setFilter('%s', '%s', value === '__ALL__' ? undefined : value)
      ", tableId, name),
      # "All" has a special value to clear the filter, and is the default option
      tags$option(value = "__ALL__", "All"),
      lapply(unique(values), tags$option),
      "aria-label" = sprintf("Filter %s", name),
      style = style
    )
  }
}

# Creates a data list column filter for a table with the given ID
dataListFilter <- function(tableId, style = "width: 100%; height: 28px;") {
  function(values, name) {
    dataListId <- sprintf("%s-%s-list", tableId, name)
    tagList(
      tags$input(
        type = "text",
        list = dataListId,
        oninput = sprintf("Reactable.setFilter('%s', '%s', event.target.value || undefined)", tableId, name),
        "aria-label" = sprintf("Filter %s", name),
        style = style
      ),
      tags$datalist(
        id = dataListId,
        lapply(unique(values), function(value) tags$option(value = value))
      )
    )
  }
}
```

```{css my-css, echo = FALSE}
.my-row:hover {
  background-color: #f5f8ff;
}
```


*VerbInd* dihasilkan dari Korpus Bahasa Indonesia Kontemporer yang dikumpulkan oleh Pusat Pengembangan dan Pelindungan Bahasa dan Sastra, Badan Pengembangan dan Pembinaan Bahasa, Kementerian Pendidikan, Kebudayaan, Riset, dan Teknologi. *VerbInd* terdiri atas `r ncol(verba)` kolom. Kolom `year` menunjukkan informasi tahun sumber teks korpusnya, sedangkan `genres` merupakan jenis ragam teks di dalam korpus. Kolom `freq` menunjukkan berapa kali verba dalam kolom `form` muncul di suatu ragam teks pada tahun tertentu. Kolom `morph` adalah luaran analisis pemilahan struktur morfologis kata menggunakan *MorphInd* [@larasati_indonesian_2011], yang telah dan terus akan diperbaiki secara manual jika terdapat kekeliruan. Kolom `pref` (prefiks/awalan), `root` (akar kata), `root_POS` (kelas kata akar kata), dan `suff` (sufiks/akhiran) diekstraksi dari komponen luaran *MorphInd*.

```{r print-table, echo = FALSE}
reactable(verba, 
          defaultPageSize = 20,
          showPageInfo = TRUE,
          defaultSorted = list(year = "asc", 
                               genres = "asc", 
                               freq = "desc"),
          style = list(fontFamily = "Work Sans, sans-serif", 
                       fontSize = "0.85rem"),
          elementId = "tbl-input",
          compact = TRUE,
          resizable = FALSE,
          rowClass = "my-row",
          wrap = FALSE,
          columns = list(
            year = colDef(
              filterable = TRUE,
              filterInput = selectFilter("tbl-input")
              ),
            form = colDef(
              filterable = TRUE,
              sticky = "left",
              # Filter by case-insensitive text match
              filterMethod = JS("function(rows, columnId, filterValue) {
              const pattern = new RegExp(filterValue, 'i')
              return rows.filter(function(row) {
              return pattern.test(row.values[columnId])
              })
              }")
              ),
            genres = colDef(
              filterable = TRUE,
              filterInput = selectFilter("tbl-input")),
            root = colDef(
              filterable = TRUE,
              align = "center",
              # Filter by case-insensitive text match
              filterMethod = JS("function(rows, columnId, filterValue) {
              const pattern = new RegExp(filterValue, 'i')
              return rows.filter(function(row) {
              return pattern.test(row.values[columnId])
              })
              }")
              ),
            morph = colDef(
              filterable = TRUE,
              filterInput = dataListFilter("tbl-input"),
              # Exact match filter method
              filterMethod = JS("(rows, columnId, filterValue) => {
              return rows.filter(row => row.values[columnId] === filterValue)
              }")
              # Filter by case-insensitive text match
              #filterMethod = JS("function(rows, columnId, filterValue) {
              #const pattern = new RegExp(filterValue, 'i')
              #return rows.filter(function(row) {
              #return pattern.test(row.values[columnId])
              #})
              #}")
              ),
            pref = colDef(
              filterable = TRUE,
              align = "center",
              filterInput = dataListFilter("tbl-input"),
              # Exact match filter method
              filterMethod = JS("(rows, columnId, filterValue) => {
              return rows.filter(row => row.values[columnId] === filterValue)
              }")
              # filterInput = selectFilter("tbl-input")
              ),
            suff = colDef(
              filterable = TRUE,
              sticky = "left",
              align = "center",
              filterInput = dataListFilter("tbl-input"),
              # Exact match filter method
              filterMethod = JS("(rows, columnId, filterValue) => {
              return rows.filter(row => row.values[columnId] === filterValue)
              }")
              # filterInput = selectFilter("tbl-input")
              ),
            root_POS = colDef(
              filterable = TRUE,
              align = "center",
              filterInput = dataListFilter("tbl-input"),
              # Exact match filter method
              filterMethod = JS("(rows, columnId, filterValue) => {
              return rows.filter(row => row.values[columnId] === filterValue)
              }")
              # filterInput = selectFilter("tbl-input")
              )
            # affix = colDef(
            #   filterable = TRUE,
            #   # Filter by case-insensitive text match
            #   filterMethod = JS("function(rows, columnId, filterValue) {
            #   const pattern = new RegExp(filterValue, 'i')
            #   return rows.filter(function(row) {
            #   return pattern.test(row.values[columnId])
            #   })
            #   }")
            #   ),
            # affix_wclass = colDef(
            #   filterable = TRUE,
            #   # Filter by case-insensitive text match
            #   filterMethod = JS("function(rows, columnId, filterValue) {
            #   const pattern = new RegExp(filterValue, 'i')
            #   return rows.filter(function(row) {
            #   return pattern.test(row.values[columnId])
            #   })
            #   }")
            #   )
            )
          ) %>% 
  reactablefmtr::add_title("Frekuensi verba bahasa Indonesia menurut ragam teks dan tahun", align = "left", font_color = "royalblue1", font_size = 20, margin = c(5,5,10,5))
```

# Daftar pustaka
